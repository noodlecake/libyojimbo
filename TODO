DONE    

    Thought about unifying the encryption manager and the context manager.

    But can't. The encryption manage has a different life time, it is active prior to establishing connection, 
    eg. at the point of challenge response, while the context only gets set up when the connection is established.

    Hence we don't actually need timeout in the context manager, like we do for encryption manager. Simpler.

TODO

    Context manager 

    Create yojimbo_context.cpp copied and adapted from encryption manager source.

    Hook up in base transport.

    Add code inside client/server to add/remove/clear context mappings.

    Add code inside base transport to query context mapping by address before read/write, and override the allocator and message factory if found.

    ------------------

    Add a limit on the number of messages allocated per-client, and track that in the message factory.

    If too many messages are allocated, return NULL. This should disconnect that particular client.

    Perhaps the message factory should detect, NULL message, and set an error flag that can be checked later -> disconnect.

    ------------------

    Add a limit on the # of bytes allocated in the stream allocator. If a stream allocation fails, it is the responsibility
    of the serialize function to handle this and return false.

    Check the stream allocator per-client each advance time, if it is in an error state, disconnect that client.

    ------------------

    Consolidate the message factories, server class, client class so they are not duplicated in test.cpp. Use the ones in shared.h

    ------------------

    Packet fragmentation and reassembly.

    Definitely needed for large snapshot blocks.

    Default to maximum packet size of 8k, so up to 7 ~1200 MTU packets

    ------------------

    v0.3.0 final release (!!!) YEY! :D

    ------------------
