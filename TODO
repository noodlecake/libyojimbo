DONE    

TODO

    ------------------

    All the work below is likely to be disruptive, it should be done in a branch, and then merged from that branch to mainline when completed!

    ------------------

    IMPORTANT: When creating allocators, don't rely on the user overriding to configure the amount of memory available for each allocator. 

    Put this in the config, this way the user can reasonably setup an allocator.

    ------------------

    Next create global and per-client allocators on server, and one allocator on client.

    Make sure these allocators are dynamically created according to config via virtual functions. 

    Add an interface something like this to the server:

        GetGlobalAllocator()

        GetClientAllocator( int clientIndex )

    And for the client, just:

        GetClientAllocator()

    ------------------

    Rework the transport so it can be created optionally without a packet factory.

    ^--- I must be missing something from the last time I worked on this. Why am I doing this?

    ^--- I think this is because I want the transport to be able to use the packet factory belonging to the client/server?

    ------------------

    Add a SetPacketFactory method

    Create the packet factory for client and server internally via a virtual.

    Make sure it the transport has SetPacketFactory called on it.

    ------------------

    Make sure that all client/server test cases in test.cpp and elsewhere remove the packet factory from setup.

    ------------------

    Now make sure all the packet factory, message factory and stream allocator go through the same allocator: 

    ------------------

    Make sure all tests pass with limited memory per-client.

    ------------------

    Packet fragmentation and reassembly.

    Definitely needed for large snapshot blocks.

    Default to maximum packet size of 8k, so up to 7 ~1200 MTU packets

    ------------------

    Ideal, don't allow fragmentation from client -> server, at least by default, because it is a security risk.

    If it is allowed, provide the user of the library with a way to configure whether it is or isn't supported.

    ------------------

    v0.3.0 release (!!!) YEY! :D

    ------------------
