DONE    

TODO

    ------------------

    Extend server to actually have one message factory per-client.

    Work out how to get this message factory in to the serialization via context mapping.

    I think at this point I really need to restructure to have one context per-client. Because context is how the message factory gets passed in.

    Need a function to create the client contexts then. Same pattern: CreateBlah( ServerResourceType type, int clientIndex )

    So there is a global context (with NULL message factory), and a per-client context with a valid message factory pointer (if that server is configured with a connection)

    ------------------

    Implement test_client_server_stream_allocator.

    Need a packet and/or message type that tests dynamic allocations using the stream allocator for that particular client.

    This is a feature so there needs to be a functional test that check the feature is actually working to find regressions.

    ------------------

    Add a limit on the number of messages allocated per-client, and track that in the message factory.

    If too many messages are allocated, return NULL. This should disconnect that particular client.

    Perhaps the message factory should detect NULL message being allocated, and set an error flag that can be checked later -> disconnect.

    ------------------

    Add a limit on the # of bytes allocated in the stream allocator. If a stream allocation fails, it is the responsibility
    of the serialize function to handle this and return false.

    Check the stream allocator per-client each advance time, if it is in an error state, disconnect that client.

    ------------------

    Consolidate the message factories, server class, client class so they are not duplicated in test.cpp. Use the ones in shared.h

    ------------------

    Packet fragmentation and reassembly.

    Definitely needed for large snapshot blocks.

    Default to maximum packet size of 8k, so up to 7 ~1200 MTU packets

    ------------------

    v0.3.0 final release (!!!) YEY! :D

    ------------------
