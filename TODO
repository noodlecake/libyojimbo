DONE    

    Almost working post-refactor. Messages are working, but something is going wrong with blocks.

    Fixed it. Was a bad fuckup on fragment bits, which was returning 0 bits for any fragment id not equal to zero.

    This bug was always there, it's just that now I'm deriving "does this channel have data to send" based on the # of bits
    it says it has to send.

    Soak is working again.

TODO    

    ------------------

    Implement an unreliable channel.

    Unreliable channels don't support fragmentation and reassembly of large blocks, that has to be done at the MTU level.

    This is for large delta snapshots.

    The same channel could be used for unreliable messages that go at the end of the packet, if there is room, eg. sounds, effects.

    Unreliable messages don't serialize the message id.

    Unreliable messages. You might want to include more than you think will fit in the packet, and include a budget, that way you can fit as many in as possible.

    This is a good way to possibly fill up any gaps left in the packet due to conservative estimates for the other parts of the packet.

    ------------------

    One thing I don't like is that the packet factory and message factory are global for all clients.

    This means that a rogue client can DOS other clients by sending and allocating too many messages, packets.

    This is relevant to the packet fragmentation and reassembly as well, because now fragments if allocated out of the packet factory
    would provide another way to easily deny service to other clients.

    The solution I think is to have a global packet factory, one packet factory per-client, one message factory per-client.

    This way the only thing a client can do is hurt itself. If it fails to allocate a fragment, message or packet it is disconnected.

    I think this is a crucial design element for security moving forward. It is simply not safe until I do this.

    ------------------

    I think the correct way forward for this is to provide callbacks in Client/Server:

        CreatePacketFactory
        CreateMessageFactory

    And then have the base client/server code call in to these callbacks whenever a factory needs to be created.

    This is a necessity for the server at least, because the server can dynamically adjust the # of clients,
    and therefore dynamically adjust the # of packet factory and message factories that it needs.

    Therefore the callback is really the only way to go about this.

    It should also be a bit cleaner. Ideally, the only things that should be maintained separately from the client/server are the transports,
    because these need to be logically separate and eventually will be doing work off main thread this makes sense. To maintain and create message and packet factories is just a nuisance though. The server and client can create and own those just fine.

    ------------------

    Packet fragmentation and reassembly.

    Definitely needed for large snapshot blocks.

    Default to maximum packet size of 8k, so up to 7 ~1200 MTU packets

    ------------------

    v0.3.0 final release (!!!) YEY! :D

    ------------------

    Packet compression

    ------------------

    Large block compression

    ------------------

    Packet aggregation.

    ------------------
