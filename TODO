DONE    

TODO

    ------------------

    Next step is to specify in the server configuration a per-client amount of memory in bytes, and a global allocator number of bytes.

    Then, setup a function to create an allocator for each client, as well as a global allocator.

    Leave the client and server using default allocator (malloc) by default, except for the global and per-client allocator that use tlsf.

    Now make sure all the packet factory, message factory and stream allocator go through the same allocator: 

    Add an interface something like this:

        GetGlobalAllocator()

        GetClientAllocator( int clientIndex )

    ------------------

    I'm seeing a chicken and egg thing here that I don't like.
 
    The packet factory is passed in to the transport.

    But I want the global packet factory to be created/owned by the server, so by default it is backed by a proper allocator (eg. the global allocator) on the server.

    But to do this, I need a way to override the transport packet factory and to create a transport without initially specifying a packet factory.

    I think I do need to do this though, because I don't want special treatment of the global packets vs. the per-client packets.

    They should all go through allocators managed by the server instance.

    Think about what is the best solution here. Really, this comes about beacuse I designed the transport and packet factories before I created the client/server.

    ------------------

    Packet fragmentation and reassembly.

    Definitely needed for large snapshot blocks.

    Default to maximum packet size of 8k, so up to 7 ~1200 MTU packets

    ------------------

    v0.3.0 release (!!!) YEY! :D

    ------------------
