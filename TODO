DONE    

TODO    

    ------------------

    Implement channel budget.

    Current behavior is equivalent to a budget of -1, eg. fill up the packet.

    How about a limit of maximum serialize size per-message, because now if I have a budget of -1 I can't work out a fair value for that.

    Add an assert to make sure channel data never goes over budget.

    ------------------

    Implement an unreliable channel.

    Unreliable channels don't support fragmentation and reassembly of large blocks, that has to be done at the MTU level.

    This is for large delta snapshots.

    The same channel could be used for unreliable messages that go at the end of the packet, if there is room, eg. sounds, effects.

    The idea would be that for a size -1 specified in the budget, it will be the responsibility of the channel to not go over the maximum
    size of the packet, but otherwise, to fill it up as much as possible. This is useful for snapshots, and for unreliable messages at the end of the packet.

    ------------------

    What about reliable, unordered messages? What do these look like?

    I think the sender looks the same, but for messages the head of line blocking doesn't stop messages from being received early.

    You get the messages as soon as they are received, and the sliding window is used only to make sure messages are reliable, not to enforce reordering.

    For large blocks, I think they must stop the stream of messages until they get through, but this is acceptable. Only receive one block at a time, can't justify reworking block sending code to send fragments from multiple blocks at the same time, and really it wouldn't add much anyway.

    What is the utility of sending reliable unordered messages? Avoiding head of line blocking when ordering doesn't count?

    But when does ordering not count? Sending state?

    Sending state is much more efficiently done via delta encoding, rather than by resending the same state over and over (when it is probably stale by 
    the time it gets through...)

    Maybe punt on this one for now?

    ------------------

    Packet fragmentation and reassembly.

    Definitely needed for large snapshot blocks.

    Default to maximum packet size of 8k, so up to 7 ~1200 MTU packets

    ------------------

    v0.3.0 release (!!!) YEY! :D

    ------------------

    Packet compression

    ------------------

    Large block compression

    ------------------

    Packet aggregation.

    ------------------
