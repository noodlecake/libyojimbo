DONE    

TODO    

    ------------------

    Implement an unreliable channel.

    Unreliable channels don't support fragmentation and reassembly of large blocks, that has to be done at the MTU level.

    This is for large delta snapshots.

    The same channel could be used for unreliable messages that go at the end of the packet, if there is room, eg. sounds, effects.

    Unreliable messages don't serialize the message id.

    Unreliable messages. You might want to include more than you think will fit in the packet, and include a budget, that way you can fit as many in as possible.

    This is a good way to possibly fill up any gaps left in the packet due to conservative estimates for the other parts of the packet.

    ------------------

    One thing I don't like is that the packet factory and message factory are global for all clients.

    This means that a rogue client can DOS other clients by sending and allocating too many messages, packets.

    This is relevant to the packet fragmentation and reassembly as well, because now fragments if allocated out of the packet factory
    would provide another way to easily deny service to other clients.

    The solution I think is to have a global packet factory, one packet factory per-client, one message factory per-client.

    This way the only thing a client can do is hurt itself. If it fails to allocate a fragment, message or packet it is disconnected.

    I think this is a crucial design element for security moving forward. It is simply not safe until I do this.

    ------------------

    Packet fragmentation and reassembly.

    Definitely needed for large snapshot blocks.

    Default to maximum packet size of 8k, so up to 7 ~1200 MTU packets

    ------------------

    v0.3.0 release (!!!) YEY! :D

    ------------------

    Packet compression

    ------------------

    Large block compression

    ------------------

    Packet aggregation.

    ------------------
