WOULD BE NICE

    ------------------

    Would really like a nice way in debug builds to warn the user about stuff, eg. better than an assert, an assert with a message.

    For example, a lot of asserts seem really low level, but they just mean, OK, you added your own packet types, but forgot to override the callback "CreatePacketFactory".

    The last thing I want is a user experiencing a bunch of really obscure low-level asserts when they are just trying to use the library.
    
    ------------------

    Definitely need more usage documentation and samples showing how to do stuff.

    I don't know that it's immediately obvious how to use libyojimbo from the samples. Or, what exactly libyojimbo does or what it's for?

    Also, better documentation could be added explaining what yojimbo is for (dedicated servers), and how its protocol works.

    Perhaps a bunch of posts to gafferongames.com would be a good idea to start?

    ------------------

    Make sure that all code that creates packets is aware that it could get a NULL value returned. 

    All message and packet create should gracefully handle packet create being NULL and set an error condition on the connection, or ignore, whichever is appropriate.

    ------------------

    AEAD idea. Protocol is currently vulnerable to being spammed invalid connect tokens.

    Of course, an invalid connect token won't decrypt, but a connect token that is an old stale token (reply attack) *will* decrypt.

    So I think the key way to avoid replay attacks being effective, is to store the timestamp in the additional data section of the AEAD of the connect token.

    That way a reused connect token can be discarded quickly, by just checking the timestamp. The test for checking the additional data vs. the HMAC of the payload will quickly reject replayed connect tokens, vs. right now which has to decrypt all of the connect token in order to check it.

    ------------------

    Idea: at the transport layer, implement an interface that can be set on the transport, to filter packets. This way, a packet can be inspected at the byte level (before serialization), and trivially rejected. Then, implement something like this for both the connect token. This will make it cheap to reject replay tokens.

    If early reject happens for a particular IP address, implement a transport level BAN of that IP for a period of time (eg. 5 minutes), and then continue to discard any IP addresses that match that ban.

    Do this IP level ban in such a way it's not vulnerable to worst case hash behavior.

    ------------------

    Security idea from Ben Garney.

    Don't perform any allocation while processing 'connection request' packets or it's a DDOS attack vector.

    ------------------

    It's somewhat risky that the server must override the packet factory, but the default implementation is the client/server packet factory.

    I think people are going to pass in their custom packet factory in the constructor, but then wonder why their custom packets aren't getting created properly.

    Add a check between the transport packet factory and the client packet factory to make sure they are compatible (eg. same # of types)    

    ------------------

    Add tests to make sure the client can recover and reconnect after one of the error states below. eg. error is properly cleared.

    ------------------

    Add unit tests for all the new client error states:

        CLIENT_STATE_PACKET_FACTORY_ERROR
        CLIENT_STATE_MESSAGE_FACTORY_ERROR
        CLIENT_STATE_STREAM_ALLOCATOR_ERROR

    ------------------

    Add a limit on the number of messages allocated per-client, and track that in the message factory.

    If too many messages are allocated, return NULL. This should disconnect that particular client.

    Add a unit test to verify this is actually working.

    ------------------

    Add a limit on the # of bytes allocated in the stream allocator. If a stream allocation fails, it is the responsibility
    of the serialize function to handle this and return false.

    Check the stream allocator per-client each advance time, if it is in an error state, disconnect that client.

    ------------------

    Add a unit test that actually exercises the stream allocator.

    ------------------

    Add a unit test that intentionally exhausts the stream allocator.

    ------------------

    Actually implement a proper allocator for messages and stream allocations.

    Look for a good allocator with arenas, pools, small block support etc.

    The key thing is that a proper allocator will allow me to:

    a) Bound the allocations to a maximum memory size, which is important.

    These allocators should be used and tested inside yojimbo by default.

    While it's nice that yojimbo lets you override the allocators and use your own, not ever project will have their own allocators setup.

    It's important for the security of yojimbo that messages come from a finite pool, and stream allocations come from a finite pool.

    ------------------
    
    Consolidate the message factories, server class, client class so they are not duplicated in test.cpp. Use the ones in shared.h

    ------------------
